class Solution {
public:
    int nearestExit(vector<vector<char>>& maze, vector<int>& entrance) {
        int m = maze.size();
        int n = maze[0].size();
        vector<vector<int>> visited(m, vector<int>(n, 0));
        queue<pair<pair<int,int>, int>> q;
        
        q.push({{entrance[0], entrance[1]}, 0});
        visited[entrance[0]][entrance[1]] = 1;
        
        vector<int> dx = {1, -1, 0, 0};
        vector<int> dy = {0, 0, 1, -1};
        
        while (!q.empty()) {
            auto [pos, dist] = q.front();
            q.pop();
            int x = pos.first, y = pos.second;
            
            for (int i = 0; i < 4; i++) {
                int nx = x + dx[i];
                int ny = y + dy[i];
                
                if (nx < 0 || nx >= m || ny < 0 || ny >= n) continue;
                
                if (maze[nx][ny] == '.' && !visited[nx][ny]) {
                    if (nx == 0 || nx == m - 1 || ny == 0 || ny == n - 1) {
                        return dist + 1;
                    }
                    visited[nx][ny] = 1;
                    q.push({{nx, ny}, dist + 1});
                }
            }
        }
        
        return -1; 
    }
};
