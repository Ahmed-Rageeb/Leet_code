#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
    string minWindow(string s, string t) {
        if (s.empty() || t.empty()) return "";

        unordered_map<char, int> freq;
        for (char c : t) freq[c]++;

        int required = freq.size();
        int formed = 0;
        unordered_map<char, int> window;

        int l = 0, r = 0;
        int minLen = INT_MAX;
        int start = 0;

        while (r < s.size()) {
            char c = s[r];
            window[c]++;

            if (freq.count(c) && window[c] == freq[c])
                formed++;

            while (l <= r && formed == required) {
                // update answer
                if (r - l + 1 < minLen) {
                    minLen = r - l + 1;
                    start = l;
                }

                // try to shrink from the left
                char leftChar = s[l];
                window[leftChar]--;
                if (freq.count(leftChar) && window[leftChar] < freq[leftChar])
                    formed--;
                l++;
            }
            r++;
        }

        return minLen == INT_MAX ? "" : s.substr(start, minLen);
    }
};
